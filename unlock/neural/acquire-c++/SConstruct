import os
import sys

lib_path = ['.']
libs = []
test_libs = []
includes = []
boost_includes = [os.path.join('boost', 'include')]

if sys.platform == 'darwin':

      boost_lib_path = [os.path.join('boost', 'macosx-x86-64', 'lib')]
      boost_libs = ['libboost_prg_exec_monitor.a', 'libboost_python.a', 'libboost_system.a', 
            'libboost_test_exec_monitor.a', 'libboost_thread.a', 
            'libboost_unit_test_framework.a']
      python_includes = ['/Library/Frameworks/Python.framework/Versions/2.7/include/python2.7/']
      libname = 'libneuralsignal_darwin_x86_64'
      ccflags = []
      cppdefines = []
      target_arch = 'x86_64'
      shlibsuffix = '.so'
      
elif sys.platform == 'win32':
      boost_lib = os.path.join('boost', 'win-x86', 'lib')
      boost_lib_path = [ boost_lib ]
      boost_lib_path.append('C:\Python27\libs')
      boost_libs = ['boost_chrono-vc110-mt-1_54',
                    'boost_python-vc110-mt-1_54',
                    'boost_system-vc110-mt-1_54',     
                    'boost_unit_test_framework-vc110-mt-1_54',
                  'libboost_test_exec_monitor-vc110-mt-1_54',
                  'boost_prg_exec_monitor-vc110-mt-1_54',
                    'boost_thread-vc110-mt-1_54']
      python_includes = ['C:\Python27\include']
      libname = 'neuralsignal_win_x86'
      ccflags = ['/MD',  '/EHsc']
      cppdefines = ['BOOST_ALL_DYN_LINK', 'MSVC', 'DLL_LINK']
      target_arch = 'x86'


lib_path.extend(boost_lib_path)
libs.extend(boost_libs)
test_libs.extend(boost_libs)
test_libs.append(libname)
includes.extend(boost_includes)
includes.extend(python_includes)
frameworks = ["Python"]

SOURCES=['neuralsignal.cpp', 'NonblockingSignal.cpp', 'FakeSignal.cpp', 'AsyncSampleCollector.cpp', 'ManagedWorkController.cpp']
UNIT_TEST_SOURCES=['AsyncSampleCollectorTest.cpp', 'SignalTestRunner.cpp', 'NonblockingSignalTest.cpp',
                   'SampleTest.cpp', 'IntegralWorkController.cpp', 'ManagedWorkControllerTest.cpp', 'IntegralWorkControllerTest.cpp']

env = Environment(CPPPATH = includes, LIBS = libs, LIBPATH = lib_path,
                  FRAMEWORKS = frameworks, SHLIBPREFIX = '',
                  TARGET_ARCH=target_arch, CCFLAGS=ccflags , CPPDEFINES=cppdefines)
                  
test_env = Environment(CPPPATH = includes, LIBS = test_libs, LIBPATH = lib_path,
                  SHLIBPREFIX = '', CCFLAGS=ccflags, CPPDEFINES=cppdefines,
                  TARGET_ARCH=target_arch)
                  
signal = env.SharedLibrary(libname, SOURCES)
test_signal = test_env.Program('signal-unit-tests', UNIT_TEST_SOURCES)
test_env.Requires(test_signal, signal)
