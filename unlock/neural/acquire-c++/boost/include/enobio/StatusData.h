#ifndef STATUSDATA_H
#define STATUSDATA_H

#include "Enobio3GAPI_global.h"

/*!
 * \class StatusData StatusData.h
 *
 * \brief This class holds the status generated by the Enobio class.
 */
class ENOBIO3GAPISHARED_EXPORT StatusData {
public:
    /*!
     * Enumeration of the possible values that the class can hold.
     */
    enum statusCode
    {
        /*!
         * An operation that involves accessing the hardware has resulted in an
         * error.
         */
        STATUS_HARDWARE_ERROR = 0,
        /*!
         * Enobio might be switched off or its battery might have run out.
         */
        STATUS_ENOBIO_OFF,
        /*!
         * The library that provides the access to the hardware could not be
         * loaded.
         */
        STATUS_NO_DLL,
        /*!
         * Access to a device that was not previously opened
         */
        STATUS_DEVICE_NOT_OPENED,
        /*!
         * For internal control
         */
        NUMBER_OF_STATUS_CODES
    };

    /*!
     * Constructor that initializes the status data.
     *
     * \param code A value from the statusCode enumeration.
     */
    StatusData (statusCode code);

    /*!
     * Access to the status value held by the object.
     *
     * \return a status code from the statusCode enumeration.
     */
    statusCode getCode () const;

    /*!
     * It returns the explaination of the status code that the object holds.
     *
     * \return The string wiht the explanation of the status code.
     */
    const char * getString () const;

    /*!
     * It transforms an status code to its string representation.
     *
     * \param code A value from the statusCode enumeration.
     *
     * \return The string with the explanation of the status code.
     */
    static const char * getStringFromCode (statusCode code);

    /*!
     * It gives the type (ERROR or WARNING) of the status event
     *
     * \param code A value from the statusCode enumeration.
     *
     * \return A string that defines the type of this status message.
     */
    static const char * getTypeFromCode (statusCode code);

private:
    /*!
     * Variable tha holds the status data code.
     */
    statusCode _code;

    /*!
     * Static variable that holds the strings that explain the different status codes.
     */
    static const char * strStatus[];

    /*!
     * Static variable that holds the strings that define the status message type
     */
    static const char * strType[];
};
#endif // STATUSDATA_H
